import React, { useEffect, useMemo, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { apiService } from '../services/api';
import ProfileDropdown from '../components/ProfileDropdown';
import { Treemap, ResponsiveContainer, Tooltip } from 'recharts';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';

interface VulnerabilityStat {
  dependencyName: string;
  dependencyVersion: string;
  severity: string;
  vulnerabilitiesCount: number;
}

const VulnerabilityTreemap: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { repoCode } = useParams<{ repoCode: string }>();
  const [stats, setStats] = useState<VulnerabilityStat[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const repoNameFromState = (location.state as any)?.repoName as string | undefined;
  const [repoName, setRepoName] = useState<string | undefined>(undefined);

  useEffect(() => {
    const fetchData = async () => {
      if (!repoCode) return;
      setLoading(true);
      setError(null);
      try {
        const res = await apiService.getVulnerabilityStats(repoCode);
        setStats(res.vulnerabilityStats || []);
        if (res.repoName) setRepoName(res.repoName);
      } catch (e) {
        setError('Failed to load vulnerability stats');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [repoCode]);

  const data = useMemo(() => {
    // Treemap expects a hierarchical structure with name/value
    return {
      name: 'dependencies',
      children: (stats || []).map((s) => ({
        name: `${s.dependencyName}@${s.dependencyVersion}`,
        size: Math.max(1, s.vulnerabilitiesCount),
        count: Math.max(1, s.vulnerabilitiesCount),
        severity: s.severity,
        dependencyCode: (s as any).dependencyCode,
      })),
    } as any;
  }, [stats]);

  const getFill = (severity: string, count: number = 1) => {
    const sev = (severity || '').toLowerCase();
    const shade = count >= 15 ? '800' : count >= 10 ? '700' : count >= 5 ? '600' : '500';
    const palette: Record<string, Record<string, string>> = {
      critical: { '500': '#ef4444', '600': '#dc2626', '700': '#b91c1c', '800': '#991b1b' },
      high: { '500': '#f97316', '600': '#ea580c', '700': '#c2410c', '800': '#9a3412' },
      medium: { '500': '#f59e0b', '600': '#d97706', '700': '#b45309', '800': '#92400e' },
      moderate: { '500': '#f59e0b', '600': '#d97706', '700': '#b45309', '800': '#92400e' },
      low: { '500': '#3b82f6', '600': '#2563eb', '700': '#1d4ed8', '800': '#1e40af' },
      unknown: { '500': '#64748b', '600': '#475569', '700': '#334155', '800': '#1f2937' },
    };
    const set = palette[sev] || palette.unknown;
    return set[shade];
  };

  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const p = payload[0].payload;
      return (
        <div className="rounded-md border px-3 py-2" style={{ backgroundColor: '#0d1117', borderColor: '#30363d' }}>
          <div className="text-xs text-[#9ca3af] font-satoshi">{p.name}</div>
          <div className="text-sm text-white font-satoshi">Vulnerabilities: {p.size}</div>
          <div className="text-xs text-[#9ca3af] font-satoshi">Severity: {p.severity}</div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="min-h-screen pt-16" style={{ backgroundColor: 'var(--bg-primary)' }}>
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center p-6 mb-4">
          <div className="flex items-center space-x-2">
            <button
              onClick={() => navigate(-1)}
              className="p-2 rounded-lg hover:bg-border-color transition-colors duration-200"
              title="Back"
            >
              <ChevronLeftIcon className="h-6 w-6 text-text-primary" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-text-primary">Vulnerability Treemap</h1>
              <p className="text-gray-400 font-satoshi text-sm">Repository: {repoNameFromState || repoName}</p>
            </div>
          </div>
          <ProfileDropdown />
        </div>
      </div>

      <div className="px-4 pb-6 max-w-6xl mx-auto">
        <div
          className="rounded-xl border shadow-xl p-4"
          style={{ backgroundColor: 'rgba(255, 255, 255, 0.01)', borderColor: 'var(--border-color)' }}
        >
          {loading ? (
            <div className="text-center py-16 text-gray-300 font-satoshi">Loading...</div>
          ) : error ? (
            <div className="text-center py-16 text-red-400 font-satoshi">{error}</div>
          ) : (stats || []).length === 0 ? (
            <div className="text-center py-16 text-gray-300 font-satoshi">No data available</div>
          ) : (
            <div className="h-[640px]">
              <ResponsiveContainer width="100%" height="100%">
                <Treemap
                  data={data.children}
                  dataKey="size"
                  stroke="var(--border-color)"
                  content={(node: any) => {
                    const { x, y, width, height, name } = node || {};
                    if (typeof x !== 'number' || typeof y !== 'number') return <g />;
                    const severity = node?.payload?.severity || 'unknown';
                    const count = node?.payload?.count || 1;
                    const fill = getFill(severity, count);
                    const centerX = x + (width || 0) / 2;
                    const centerY = y + (height || 0) / 2;
                    const n = String(name || '');
                    const atIndex = n.lastIndexOf('@');
                    const dep = atIndex > -1 ? n.slice(0, atIndex) : n;
                    const ver = atIndex > -1 ? n.slice(atIndex + 1) : '';
                    const smallestSide = Math.min(width || 0, height || 0);
                    const titleSize = Math.max(14, Math.min(22, Math.floor(smallestSide / 6)));
                    const versionSize = Math.max(12, Math.min(18, Math.floor(smallestSide / 8)));
                    const showLabel = (width || 0) > 140 && (height || 0) > 70;
                    return (
                      <g>
                        <rect
                          x={x}
                          y={y}
                          width={width}
                          height={height}
                          style={{ fill, stroke: 'var(--border-color)', opacity: 0.92 }}
                          rx={10}
                          ry={10}
                          // non-interactive tile
                        />
                        {/* subtle inner border for contrast */}
                        <rect
                          x={(x || 0) + 0.5}
                          y={(y || 0) + 0.5}
                          width={(width || 0) - 1}
                          height={(height || 0) - 1}
                          style={{ fill: 'transparent', stroke: 'rgba(255,255,255,0.06)' }}
                          rx={10}
                          ry={10}
                        />
                        {showLabel && (
                          <g>
                            <text
                              x={centerX}
                              y={centerY - 4}
                              textAnchor="middle"
                              fill="#e5e7eb"
                              fontSize={titleSize}
                              className="font-satoshi"
                              style={{ paintOrder: 'stroke', stroke: 'rgba(0,0,0,0.35)', strokeWidth: 1 }}
                            >
                              {dep.length > 24 ? dep.slice(0, 23) + 'â€¦' : dep}
                            </text>
                            {ver && (
                              <text
                                x={centerX}
                                y={centerY + titleSize}
                                textAnchor="middle"
                                fill="#cbd5e1"
                                fontSize={versionSize}
                                className="font-satoshi"
                                style={{ paintOrder: 'stroke', stroke: 'rgba(0,0,0,0.35)', strokeWidth: 1 }}
                              >
                                {ver}
                              </text>
                            )}
                          </g>
                        )}
                      </g>
                    );
                  }}
                >
                  <Tooltip content={<CustomTooltip />} />
                </Treemap>
              </ResponsiveContainer>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTreemap;


